# LearnLock: Initial Development Setup

# Setting up the environment and foundational code for the LearnLock app

# Backend - Node.js Server (Express.js)
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)

# Configure the database
-- Created by: Julies Adams
-- Date and Time: 2024-12-03 10:30:00
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://username:password@localhost/learnlock_db'
db = SQLAlchemy(app)

# Database models

# External System Integration: Example SQL Statement for PowerSchool Access

# Additional backend enhancements for robustness and features
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    role = db.Column(db.String(20), nullable=False)  # student, teacher, parent

class LearningModule(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text, nullable=False)

class Progress(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=db.func.current_timestamp())
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    module_id = db.Column(db.Integer, db.ForeignKey('learning_module.id'), nullable=False)
    progress_percent = db.Column(db.Float, nullable=False)

# API Endpoints

@app.route('/api/powerschool/login', methods=['POST'])
def powerschool_login():
    try:
        data = request.get_json()
        username = data.get('username')
        password = data.get('password')

        if not username or not password:
            return jsonify({"message": "Username and password are required."}), 400

        # Simulated OAuth Logic (replace with actual API call to PowerSchool)
        oauth_response = {
            "access_token": "mock_access_token",
            "refresh_token": "mock_refresh_token",
            "expires_in": 3600
        }

        # Store tokens securely (for demonstration purposes, print them)
        print(f"Access Token: {oauth_response['access_token']}")
        print(f"Refresh Token: {oauth_response['refresh_token']}")

        return jsonify({
            "message": "Login successful",
            "access_token": oauth_response["access_token"]
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/powerschool/update-grades', methods=['POST'])
def update_powerschool_grades():
    try:
        data = request.get_json()
        teacher_id = data.get('teacher_id')
        grades = data.get('grades')  # Expected format: [{'student_id': 1, 'grade': 'A'}, ...]

        if not teacher_id or not grades:
            return jsonify({"message": "Teacher ID and grades are required."}), 400

        # Placeholder logic to push grades to PowerSchool API
        # Assuming the `endpoint_url` and `api_key` are stored in the database
        integration = db.session.query(PowerSchoolIntegration).filter_by(teacher_id=teacher_id).first()
        if not integration or not integration.access_granted:
            return jsonify({"message": "PowerSchool integration not found or access not granted."}), 404

        # Simulate API request to PowerSchool (replace with actual API logic)
        success = True  # Placeholder for API success response
        if success:
            return jsonify({"message": "Grades successfully synced to PowerSchool."})
        else:
            return jsonify({"message": "Failed to sync grades with PowerSchool."}), 500
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/powerschool/sync', methods=['POST'])
def sync_powerschool():
    try:
        data = request.get_json()
        teacher_id = data.get('teacher_id')
        api_key = data.get('api_key')
        endpoint_url = data.get('endpoint_url')

        # Validate required fields
        if not teacher_id or not api_key or not endpoint_url:
            return jsonify({"message": "Teacher ID, API key, and endpoint URL are required."}), 400

        # Check if integration already exists
        integration = db.session.query(PowerSchoolIntegration).filter_by(teacher_id=teacher_id).first()
        if integration:
            integration.api_key = api_key
            integration.endpoint_url = endpoint_url
            integration.access_granted = True
        else:
            # Create a new integration record
            integration = PowerSchoolIntegration(
                teacher_id=teacher_id,
                api_key=api_key,
                endpoint_url=endpoint_url,
                access_granted=True
            )
            db.session.add(integration)

        db.session.commit()
        return jsonify({"message": "PowerSchool sync completed successfully."})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/powerschool/grades', methods=['GET'])
def get_powerschool_grades():
    try:
        teacher_id = request.args.get('teacher_id')
        if not teacher_id:
            return jsonify({"message": "Teacher ID is required."}), 400

        # Fetch data from PowerSchool (simulate with placeholder logic)
        grades = {
            "teacher_id": teacher_id,
            "grades": [
                {"student_id": 1, "grade": "A"},
                {"student_id": 2, "grade": "B+"}
            ]
        }
        return jsonify(grades)
    except Exception as e:
        return jsonify({"error": str(e)}), 500
@app.route('/api/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    email = data.get('email')
    if not username or not email:
        return jsonify({"message": "Username and email are required."}), 400
    user = User.query.filter_by(username=username, email=email).first()
    email = data.get('email')
    user = User.query.filter_by(username=username, email=email).first()
    if user:
        return jsonify({"message": "Login successful", "role": user.role})
    return jsonify({"message": "Invalid credentials"}), 401

@app.route('/api/modules', methods=['GET'])
def get_modules():
    try:
        modules = LearningModule.query.all()
        return jsonify([{"id": module.id, "title": module.title} for module in modules])
    except Exception as e:
        return jsonify({"error": str(e)}), 500
def get_modules():
    modules = LearningModule.query.all()
    return jsonify([{"id": module.id, "title": module.title} for module in modules])

@app.route('/api/progress', methods=['POST'])
def update_progress():
    try:
        data = request.get_json()
        progress = Progress(user_id=data['user_id'], module_id=data['module_id'], progress_percent=data['progress_percent'])
        db.session.add(progress)
        db.session.commit()
        return jsonify({"message": "Progress updated successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
def update_progress():
    data = request.get_json()
    progress = Progress(user_id=data['user_id'], module_id=data['module_id'], progress_percent=data['progress_percent'])
    db.session.add(progress)
    db.session.commit()
    return jsonify({"message": "Progress updated successfully"})

if __name__ == '__main__':
    db.create_all()

# Unit Tests for API Endpoints
import unittest
from flask_testing import TestCase

class LearnLockTestCase(TestCase):
    def create_app(self):
        app.config['TESTING'] = True
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
        return app

    def setUp(self):
        db.create_all()
        test_user = User(username='test_teacher', email='teacher@example.com', role='teacher')
        db.session.add(test_user)
        db.session.commit()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_login(self):
        response = self.client.post('/api/login', json={
            'username': 'test_teacher',
            'email': 'teacher@example.com'
        })
        self.assertEqual(response.status_code, 200)
        self.assertIn('Login successful', response.json['message'])

    def test_update_progress(self):
        response = self.client.post('/api/progress', json={
            'user_id': 1,
            'module_id': 1,
            'progress_percent': 75.0
        })
        self.assertEqual(response.status_code, 200)
        self.assertIn('Progress updated successfully', response.json['message'])

    def test_powerschool_sync(self):
        response = self.client.post('/api/powerschool/sync', json={
            'teacher_id': 1,
            'api_key': 'fake_key',
            'endpoint_url': 'http://example.com/api'
        })
        self.assertEqual(response.status_code, 200)
        self.assertIn('PowerSchool sync completed successfully', response.json['message'])

if __name__ == '__main__':
    unittest.main()

# SQL Statement for PowerSchool Integration
# Assuming a secure API connection is established to PowerSchool:
"""
CREATE TABLE powerschool_integration (
    id SERIAL PRIMARY KEY,
    teacher_id INT REFERENCES user(id),
    school_id INT,
    api_key VARCHAR(255),
    endpoint_url VARCHAR(255) NOT NULL,
    access_granted BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Example Query to Fetch Teacher Data from PowerSchool:
-- SELECT * FROM powerschool_api WHERE teacher_id = ?;
"""

# Populate the database with initial test data
if not User.query.first():
    test_user = User(username='test_user', email='test_user@example.com', role='student')
    db.session.add(test_user)
    db.session.commit()  # Ensure the database tables are created
    app.run(debug=True)
